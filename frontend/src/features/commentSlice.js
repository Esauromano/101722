import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchData } from './commentAPI';

const comments = [
    {
    "id": "7e16d8d9-3f0f-4dc5-8693-44084d8abf57",
    "comment": "This is the first comment",
    "replies": "undefined",
    "commentnum": 1
    }
  ]

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(commentsAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const commentsAsync = createAsyncThunk(
  'comments/fetchCommentData',
  async (state, action) => {
    console.log('state', state)
    console.log('action', action)
    console.log('state', action.getState())
    const commentData = await fetchData();
    // The value we return becomes the `fulfilled` action payload
    console.log('commentData', commentData)
    state = [...commentData];
    return commentData;
  }
);


export const commentsSlice = createSlice({
  name: 'comments',
  comments,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    ponloscomments: (state, comments) => {
      
    console.log('ponloscomments state', state)
    console.log('ponloscomments comments', comments)
    return comments.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(commentsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(commentsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.comments = {...action.payload};
      });
  },
});

export const { ponloscomments } = commentsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.comments.value)`
export const selectComments = (state) => state.comments;
//export const showStatus = (state) => state.status;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const loadMensajes = (mensajes) => (dispatch, getState) => {
  const currentValue = selectComments(getState());
  console.log(currentValue)
  dispatch(ponloscomments(mensajes));
};

export default commentsSlice.reducer;
